<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common Vulnerabilities &amp; Exposures (CVEs) on </title>
    <link>https://1d8.github.io/cves/</link>
    <description>Recent content in Common Vulnerabilities &amp; Exposures (CVEs) on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://1d8.github.io/cves/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2021-29011 - XSS</title>
      <link>https://1d8.github.io/cves/cve_2021_29011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_29011/</guid>
      <description>CVE-2021-29011 (XSS)
There are several features of the radius manager software that are vulnerable to cross-site scripting (xss). Successful exploitation requires that you have access to the Radius Management software web interface and be logged in or have an account with sufficient privileges for adding/editing certain items (such as adding users, access points, etc).
This may be used as a means to elevate privileges when chained together with CVE-2021-29012 since a low-privilege account is required.</description>
    </item>
    
    <item>
      <title>CVE-2021-29012 - Broken Session Management</title>
      <link>https://1d8.github.io/cves/cve_2021_29012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_29012/</guid>
      <description>CVE-2021-29012 (Broken Session Management)
When an admin user logs in, their session cookie is given &amp;amp; doesn&amp;rsquo;t expire upon logging out. Instead the session cookie is temporarily disabled until the admin logs in again. The session cookie doesn&amp;rsquo;t change so if an attacker manages to steal a session cookie, then they can simply reuse it when the admin is logged in again and impersonate them. And if they aren&amp;rsquo;t successful at logging in the first time due to the admin being logged out, they can simply keep trying until the admin is logged in again and get a successful login.</description>
    </item>
    
    <item>
      <title>CVE-2021-30147 - CSRF</title>
      <link>https://1d8.github.io/cves/cve_2021_30147/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_30147/</guid>
      <description>CVE-2021-30147 (DMA RADIUS Manager 4.4.0)
CSRF - Creating Access Points This exploit requires an attacker to have access to the web interface of the RADIUS Manager but an account isn&amp;rsquo;t required (instead, this CSRF can be exploited in order to create an account for the attacker.). It also requires the victim to browse to our custom crafted webpage &amp;amp; be already logged in as a RADIUS user with the appropriate privileges for the certain action we want them to execute (EX: If we want the victim&amp;rsquo;s account to create a new user account for us, the victim must be logged in as someone with sufficient privileges that allows them to create an account).</description>
    </item>
    
    <item>
      <title>CVE-2021-4177 - Generation of Error Message Containing Sensitive Information LiveHelperChat</title>
      <link>https://1d8.github.io/cves/cve_2021_4177/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_4177/</guid>
      <description>Description When updating the geolocation detection configuration, we&amp;rsquo;re given the option to specify a file location of a city database file, this can be used to determine if files exist or not. We are not able to see the contents of the file, but we are indeed able to determine if the file exists based on the server&amp;rsquo;s response.
If the file location is highlighted green, we know that the file exists.</description>
    </item>
    
    <item>
      <title>CVE-2021-45785 - CSRF on TruDesk</title>
      <link>https://1d8.github.io/cves/cve_2021_45785/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_45785/</guid>
      <description>Description There is a CSRF vulnerability which would allow an attacker to restart the server by simply having a victim with the appropriate privileges visit an attacker&amp;rsquo;s crafted webpage.
The vulnerability exists when performing a GET request to the /api/v1/admin/restart endpoint
There is also another CSRF vulnerability which would allow an attacker to disable a victim&amp;rsquo;s 2FA (/api/v1/users/&amp;lt;user ID&amp;gt;/removel2auth). This requires the victim&amp;rsquo;s user ID, but this can easily be obtained by simply deleting a conversation with the victim which is a vulnerability that I described here: https://huntr.</description>
    </item>
    
    <item>
      <title>CVE-2022-0083 - Generation of Error Message Containing Sensitive Information LiveHelperChat</title>
      <link>https://1d8.github.io/cves/cve_2022_0083/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_0083/</guid>
      <description>Description When resetting your password, you&amp;rsquo;re able to enumerate users based on the way that the server responds to your request. If you enter an email that doesn&amp;rsquo;t exist (for example: test@gmail.com), then the server will respond with an HTTP 302 FOUND status response code (indicated by line 97 of the occurrence link)
But if you attempt to reset the password for an account that you know exists (for example: remdex@gmail.</description>
    </item>
    
    <item>
      <title>CVE-2022-0372 - XSS Crater-Invoice</title>
      <link>https://1d8.github.io/cves/cve_2022_0372/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_0372/</guid>
      <description>Description There is a vulnerability in the upload avatar functionality of crater invoice which would allow an attacker to upload malicious .SVG files in order to execute Javascript. All that is required is that the victim browse to the link location of the .SVG file Proof of Concept
Proof of Concept xss.svg:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt; &amp;lt;svg version=&amp;quot;1.1&amp;quot; baseProfile=&amp;quot;full&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt; &amp;lt;polygon id=&amp;quot;triangle&amp;quot; points=&amp;quot;0,0 0,50 50,0&amp;quot; fill=&amp;quot;#009900&amp;quot; stroke=&amp;quot;#004400&amp;quot;/&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; alert(&amp;quot;svg xss&amp;quot;); &amp;lt;/script&amp;gt; &amp;lt;/svg&amp;gt;  Request:</description>
    </item>
    
    <item>
      <title>CVE-2022-4804 - Unauthorized Attacker Can Change Visibility Status of Victim&#39;s Memos</title>
      <link>https://1d8.github.io/cves/cve_2022_4804/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_4804/</guid>
      <description>Description An attacker can make a private memo into a public memo in order to view it. All the attacker needs to know is the memo ID and they can make a PATCH request to /api/memo/&amp;lt;memo ID&amp;gt; with the following request data:
{&amp;quot;id&amp;quot;:&amp;lt;MEMO ID&amp;gt;,&amp;quot;visibility&amp;quot;:&amp;quot;PUBLIC&amp;quot;,&amp;quot;resourceIdList&amp;quot;:[]}
Then the attacker can visit the memo URL &amp;amp; view the memo data of the victim. The memo URL format is similar to this: https://demo.usememos.com/m/&amp;lt;MEMO ID&amp;gt;.</description>
    </item>
    
    <item>
      <title>CVE-2023-1541 - Admin Able To Perform Operations On Themselves By Interacting With API Answer</title>
      <link>https://1d8.github.io/cves/cve_2023_1541/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2023_1541/</guid>
      <description>Description When setting a password through /admin/users URI, the admin is not allowed to set their own new password through this URI. If they attempt to do so, they receive an error stating Forbidden to operate on yourself. But this is easily bypassable by interacting with the API: if you set a new password for another user, then change the user_id parameter within the request to the admin user ID.</description>
    </item>
    
    <item>
      <title>CVE-2024-37741 - XSS on OpenPLC</title>
      <link>https://1d8.github.io/cves/cve_2024_37741/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2024_37741/</guid>
      <description>Description OpenPLC&amp;rsquo;s Runtime, version 3 (https://github.com/thiagoralves/OpenPLC_v3) is vulnerable to a cross-site scripting (XSS) vulnerability that affects user&amp;rsquo;s profile pictures. An attacker could upload a maliciously crafted .svg image file and gain code execution via Javascript. The CVE assigned for this particular vulnerability is CVE-2024-37741 and can be viewed here.
Reproduction Use this payload &amp;amp; save it as image.svg:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt; &amp;lt;svg version=&amp;quot;1.1&amp;quot; baseProfile=&amp;quot;full&amp;quot; xmlns=&amp;quot;http://www.</description>
    </item>
    
  </channel>
</rss>

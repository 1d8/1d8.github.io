<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About Me on </title>
    <link>https://1d8.github.io/</link>
    <description>Recent content in About Me on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://1d8.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Active Directory (AD) Attacks</title>
      <link>https://1d8.github.io/cheatsheets/adattacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cheatsheets/adattacks/</guid>
      <description>AD Attack Cheatsheet Description: This is going to be a compilation of my notes on various Active Directory (AD) attacks. I may dive deeper into some attacks and go over creating a homelab vulnerable to these attacks and dive into tools to execute these attacks as well
 ASREPRoastable Accounts - Active Directory user accounts that have the DO NOT REQUIRE KERBEROS PREAUTHENTICATION property enabled. This allows an attacker to request a Kerberos ticket without having to provide a password for preauthentication, just the username and the domain which can be easily found.</description>
    </item>
    
    <item>
      <title>Active Directory (AD) Basics</title>
      <link>https://1d8.github.io/cheatsheets/adbasics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cheatsheets/adbasics/</guid>
      <description>Description: Notes taken from the TryHackMe room AD Basics. Will likely add to this as I progress in my AD adventure
Overview  What AD is? What an AD domain is? What components go into an AD domain Forests &amp;amp; Domain trusts etc  Windows Domains Windows Domains is a group of users &amp;amp; computers under the administration of a given business
 The main idea/goal is centralizing the administration of those components of a Windows network into a single repository called Active Directory (AD)  The server running the AD services is called the Domain Controller (DC)</description>
    </item>
    
    <item>
      <title>Ansible Trix</title>
      <link>https://1d8.github.io/publications/ansibletrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/ansibletrix/</guid>
      <description>Description: This post contains a set of Ansible commands that I&amp;rsquo;ve used recently to explore systems (both Linux &amp;amp; Windows) &amp;amp; enumerate different information about them!
Setup Ansible Module We can use the setup Ansible module which returns a wealth of information about the machine we&amp;rsquo;re accessing! We can run it as a one-liner by running: ansible all -i &amp;lt;IP Address&amp;gt;, -m setup -e &amp;quot;ansible_user=&amp;lt;username&amp;gt; ansible_password=&amp;lt;password&amp;gt; ansible_shell_type=powershell ansible_connection=ssh host_key_checking=false&amp;quot; and this would output:</description>
    </item>
    
    <item>
      <title>Attacktive Directory Room Walkthroug/</title>
      <link>https://1d8.github.io/writeups/thm/attacktivedirectory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/attacktivedirectory/</guid>
      <description>Description: Attacktive Directory Tryhackme Room Walkthrough
Room link: https://tryhackme.com/room/attacktivedirectory
Enumeration: Welcome To Attacktive Directory Performing an initial nmap scan on the target IP address:
nmap -sV -sC -Pn &amp;lt;INSERT IP ADDRESS&amp;gt;
We see various ports open! We also see a domain name which is spookysec.local. We can also run crackmapexec on the target to confirm this domain name:
crackmapexec smb &amp;lt;INSERT IP ADDRESS&amp;gt;
We now know that the TLD being used is .</description>
    </item>
    
    <item>
      <title>Committed Sensitive Data</title>
      <link>https://1d8.github.io/writeups/thm/gitcommitted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/gitcommitted/</guid>
      <description>Description: Investigating Git commits for sensitive data
TryHackMe&amp;rsquo;s Committed - https://tryhackme.com/room/committed
For this challenge, we&amp;rsquo;re given an Ubuntu machine and told that sensitive data, aka our flag, has been committed to a Github repository, but it is unknown where the exact file location that the data was committed to. Our task is to find this sensitive data using git!
With git, every commit is logged and gets a commit ID which is a long hash-like string.</description>
    </item>
    
    <item>
      <title>Compromised Wordpress Log Investigation</title>
      <link>https://1d8.github.io/writeups/blueteamlabsonline/wordpressloganalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/blueteamlabsonline/wordpressloganalysis/</guid>
      <description>Description: Analyzing the logs of a compromised Wordpress site Log Analysis Compromised Wordpress - https://blueteamlabs.online/home/challenge/9
In this challenge, we&amp;rsquo;re given a log file and told that it belongs to a Wordpress site which was compromised. The way in which the site was compromised is unknown, but it&amp;rsquo;s suspected that an installed plugin was vulnerable to Remote Code Execution (RCE) and an attacker exploited this to gain access.
The task questions are:</description>
    </item>
    
    <item>
      <title>CVE-2021-29011 - XSS</title>
      <link>https://1d8.github.io/cves/cve_2021_29011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_29011/</guid>
      <description>CVE-2021-29011 (XSS)
There are several features of the radius manager software that are vulnerable to cross-site scripting (xss). Successful exploitation requires that you have access to the Radius Management software web interface and be logged in or have an account with sufficient privileges for adding/editing certain items (such as adding users, access points, etc).
This may be used as a means to elevate privileges when chained together with CVE-2021-29012 since a low-privilege account is required.</description>
    </item>
    
    <item>
      <title>CVE-2021-29012 - Broken Session Management</title>
      <link>https://1d8.github.io/cves/cve_2021_29012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_29012/</guid>
      <description>CVE-2021-29012 (Broken Session Management)
When an admin user logs in, their session cookie is given &amp;amp; doesn&amp;rsquo;t expire upon logging out. Instead the session cookie is temporarily disabled until the admin logs in again. The session cookie doesn&amp;rsquo;t change so if an attacker manages to steal a session cookie, then they can simply reuse it when the admin is logged in again and impersonate them. And if they aren&amp;rsquo;t successful at logging in the first time due to the admin being logged out, they can simply keep trying until the admin is logged in again and get a successful login.</description>
    </item>
    
    <item>
      <title>CVE-2021-30147 - CSRF</title>
      <link>https://1d8.github.io/cves/cve_2021_30147/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_30147/</guid>
      <description>CVE-2021-30147 (DMA RADIUS Manager 4.4.0)
CSRF - Creating Access Points This exploit requires an attacker to have access to the web interface of the RADIUS Manager but an account isn&amp;rsquo;t required (instead, this CSRF can be exploited in order to create an account for the attacker.). It also requires the victim to browse to our custom crafted webpage &amp;amp; be already logged in as a RADIUS user with the appropriate privileges for the certain action we want them to execute (EX: If we want the victim&amp;rsquo;s account to create a new user account for us, the victim must be logged in as someone with sufficient privileges that allows them to create an account).</description>
    </item>
    
    <item>
      <title>CVE-2021-4177 - Generation of Error Message Containing Sensitive Information LiveHelperChat</title>
      <link>https://1d8.github.io/cves/cve_2021_4177/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_4177/</guid>
      <description>Description When updating the geolocation detection configuration, we&amp;rsquo;re given the option to specify a file location of a city database file, this can be used to determine if files exist or not. We are not able to see the contents of the file, but we are indeed able to determine if the file exists based on the server&amp;rsquo;s response.
If the file location is highlighted green, we know that the file exists.</description>
    </item>
    
    <item>
      <title>CVE-2021-45785 - CSRF on TruDesk</title>
      <link>https://1d8.github.io/cves/cve_2021_45785/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2021_45785/</guid>
      <description>Description There is a CSRF vulnerability which would allow an attacker to restart the server by simply having a victim with the appropriate privileges visit an attacker&amp;rsquo;s crafted webpage.
The vulnerability exists when performing a GET request to the /api/v1/admin/restart endpoint
There is also another CSRF vulnerability which would allow an attacker to disable a victim&amp;rsquo;s 2FA (/api/v1/users/&amp;lt;user ID&amp;gt;/removel2auth). This requires the victim&amp;rsquo;s user ID, but this can easily be obtained by simply deleting a conversation with the victim which is a vulnerability that I described here: https://huntr.</description>
    </item>
    
    <item>
      <title>CVE-2022-0083 - Generation of Error Message Containing Sensitive Information LiveHelperChat</title>
      <link>https://1d8.github.io/cves/cve_2022_0083/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_0083/</guid>
      <description>Description When resetting your password, you&amp;rsquo;re able to enumerate users based on the way that the server responds to your request. If you enter an email that doesn&amp;rsquo;t exist (for example: test@gmail.com), then the server will respond with an HTTP 302 FOUND status response code (indicated by line 97 of the occurrence link)
But if you attempt to reset the password for an account that you know exists (for example: remdex@gmail.</description>
    </item>
    
    <item>
      <title>CVE-2022-0372 - XSS Crater-Invoice</title>
      <link>https://1d8.github.io/cves/cve_2022_0372/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_0372/</guid>
      <description>Description There is a vulnerability in the upload avatar functionality of crater invoice which would allow an attacker to upload malicious .SVG files in order to execute Javascript. All that is required is that the victim browse to the link location of the .SVG file Proof of Concept
Proof of Concept xss.svg:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt; &amp;lt;svg version=&amp;quot;1.1&amp;quot; baseProfile=&amp;quot;full&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt; &amp;lt;polygon id=&amp;quot;triangle&amp;quot; points=&amp;quot;0,0 0,50 50,0&amp;quot; fill=&amp;quot;#009900&amp;quot; stroke=&amp;quot;#004400&amp;quot;/&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; alert(&amp;quot;svg xss&amp;quot;); &amp;lt;/script&amp;gt; &amp;lt;/svg&amp;gt;  Request:</description>
    </item>
    
    <item>
      <title>CVE-2022-4804 - Unauthorized Attacker Can Change Visibility Status of Victim&#39;s Memos</title>
      <link>https://1d8.github.io/cves/cve_2022_4804/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2022_4804/</guid>
      <description>Description An attacker can make a private memo into a public memo in order to view it. All the attacker needs to know is the memo ID and they can make a PATCH request to /api/memo/&amp;lt;memo ID&amp;gt; with the following request data:
{&amp;quot;id&amp;quot;:&amp;lt;MEMO ID&amp;gt;,&amp;quot;visibility&amp;quot;:&amp;quot;PUBLIC&amp;quot;,&amp;quot;resourceIdList&amp;quot;:[]}
Then the attacker can visit the memo URL &amp;amp; view the memo data of the victim. The memo URL format is similar to this: https://demo.usememos.com/m/&amp;lt;MEMO ID&amp;gt;.</description>
    </item>
    
    <item>
      <title>CVE-2023-1541 - Admin Able To Perform Operations On Themselves By Interacting With API Answer</title>
      <link>https://1d8.github.io/cves/cve_2023_1541/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2023_1541/</guid>
      <description>Description When setting a password through /admin/users URI, the admin is not allowed to set their own new password through this URI. If they attempt to do so, they receive an error stating Forbidden to operate on yourself. But this is easily bypassable by interacting with the API: if you set a new password for another user, then change the user_id parameter within the request to the admin user ID.</description>
    </item>
    
    <item>
      <title>CVE-2024-37741 - Cross-Site Scripting (XSS) on OpenPLC Runtime Version 3</title>
      <link>https://1d8.github.io/cves/cve_2024_37741/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/cves/cve_2024_37741/</guid>
      <description>Description OpenPLC&amp;rsquo;s Runtime, version 3 (https://github.com/thiagoralves/OpenPLC_v3) is vulnerable to a cross-site scripting (XSS) vulnerability that affects user&amp;rsquo;s profile pictures. An attacker could upload a maliciously crafted .svg image file and gain code execution via Javascript. The CVE assigned for this particular vulnerability is CVE-2024-37741 and can be viewed here.
Reproduction Use this payload &amp;amp; save it as image.svg:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE svg PUBLIC &amp;quot;-//W3C//DTD SVG 1.1//EN&amp;quot; &amp;quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&amp;quot;&amp;gt; &amp;lt;svg version=&amp;quot;1.1&amp;quot; baseProfile=&amp;quot;full&amp;quot; xmlns=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>DC-1 Writeup</title>
      <link>https://1d8.github.io/writeups/provinggrounds/dc-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/provinggrounds/dc-1/</guid>
      <description>Despite the name, this is not a Domain Controller and is indeed a Linux box!
Starting off with a quick nmap scan of the box:
We see 3 services running on the box:
 22 - SSH 80 - HTTP 111 - RPCBind  What really caught my attention was port 80 since it&amp;rsquo;s running Drupal, which is an open-source Content Management System (CMS) and nmap is telling us that it&amp;rsquo;s running version 7 of Drupal which has an SQL injection vulnerability that was dubbed Drupalgeddon!</description>
    </item>
    
    <item>
      <title>Detecting Port Scanning</title>
      <link>https://1d8.github.io/writeups/letsdefend/portscandetection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/portscandetection/</guid>
      <description>Description: Using Wireshark to detect a malicious user performing a port scan on a network Let&amp;rsquo;s Defend Port Scan Activity - https://app.letsdefend.io/challenge/port-scan-activity/
This challenge entails detecting a malicious user performing a port scan on a network by using Wireshark!
 What is the IP address scanning the environment?  10.42.42.253
In order to connect to a host via TCP, a three-way handshake must be completed which begins with an initiating host beginning the connection by sending a TCP SYN packet.</description>
    </item>
    
    <item>
      <title>Disclose The Agent Packet Analysis</title>
      <link>https://1d8.github.io/writeups/letsdefend/disclosetheagent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/disclosetheagent/</guid>
      <description>Description: Analyzing a pcap file with Wireshark to find the secret agent Disclose The Agent - https://app.letsdefend.io/challenge/disclose-the-agent/
For this challenge, we&amp;rsquo;re given a pcap along with a series of questions:
  What is the email address of Ann&amp;rsquo;s secret boyfriend?
  What is Ann&amp;rsquo;s email password?
  What is the name of the file that Ann sent to his secret lover?
  In what country will Ann meet with her secret lover?</description>
    </item>
    
    <item>
      <title>Diving Into LLMNR Poisoning</title>
      <link>https://1d8.github.io/publications/llmnrpoisoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/llmnrpoisoning/</guid>
      <description>Description: This post will dive into the topic of LLMNR poisoning, specifically what the LLMNR protocol is, how we could poison it, and diving into what it looks like in a packet capture
Lab Setup In my lab setup, I have 3 machines:
 Kali Linux machine representing the threat actor  IP address - 192.168.56.107   Windows workstation representing the victim  IP address - 192.168.56.118   Windows server representing the Domain Controller (DC)  IP address - 192.</description>
    </item>
    
    <item>
      <title>Dmasoft PrivEsc Exploit</title>
      <link>https://1d8.github.io/publications/dmasoft_cookiestealer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/dmasoft_cookiestealer/</guid>
      <description>Description: &amp;ldquo;Chains CVE-2021-29011 and CVE-2021-29012 together to inject Javascript and steal cookies
The attack scenario is:
 We compromise a low-level manager account on Dmasoft lab&amp;rsquo;s web interface We inject Javascript into an area this low-level manager account has access to A higher privilege manager account visits the area we injected our Javascript Their session cookie is sent to our website and we check their privileges  All of this is automated with elevate.</description>
    </item>
    
    <item>
      <title>Epoch Web App Code Execution</title>
      <link>https://1d8.github.io/writeups/thm/epochrce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/epochrce/</guid>
      <description>Description: Hacking an epoch time converter web application
Epoch - https://tryhackme.com/room/epoch
Navigating to the webserver, we find an input box where we can enter an Epoch value that&amp;rsquo;s converted to a UTC value:
We know from the THM room page that there is some form of command injection involved in this room, so my first thought is to use a semicolon in order to terminate the first command being executed, then add on our own command.</description>
    </item>
    
    <item>
      <title>Exploiting Insecure Service Permissions</title>
      <link>https://1d8.github.io/writeups/thm/insecureservicepermissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/insecureservicepermissions/</guid>
      <description>Description: In this post, I go over setting up a lab environment with a service that has insecure permissions, then walkthrough how to exploit it using PowerUp &amp;amp; manually
Insecure Service Permissions When it comes to this vulnerability, we&amp;rsquo;re simply modifying the service so it points to an executable we want to run along with the parameters to run with it! The reason why this is possible is because excessive privileges have been granted to modify a service, such as allowing everybody to modify it or allowing lower privilege users to modify it.</description>
    </item>
    
    <item>
      <title>Grab the phisher</title>
      <link>https://1d8.github.io/writeups/cyberdefenders/grabthephisher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/cyberdefenders/grabthephisher/</guid>
      <description>Description: &amp;ldquo;Investigating a phishing page to learn more about the phisher GrabThePhisher - https://cyberdefenders.org/blueteam-ctf-challenges/95i
After unzipping the file, we go into the pankewk/ directory and discover various directories which are typical of a web server. But there&amp;rsquo;s also a metamask/ directory which appears interesting!
Within this directory, we have 2 files &amp;amp; 1 directory:
 fonts/ index.html metamask.php  Opening up the metamask.php file:
We see that it contains .php code that captures certain data, then sends it off to a Telegram server, and there&amp;rsquo;s also an interesting comment that&amp;rsquo;s signed with the alias j1j1b1s@m3r0</description>
    </item>
    
    <item>
      <title>IceID Malicious Doc Analysis</title>
      <link>https://1d8.github.io/writeups/letsdefend/iceiddocanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/iceiddocanalysis/</guid>
      <description>Description: Performing malware analysis on a malicious document from the IceID malware family Let&amp;rsquo;s Defend IcedID Malware Family - https://app.letsdefend.io/challenge/IcedID-Malware-Family/
 What is the sha256 hash for the malspam attachment?  cc721111b5924cfeb91440ecaccc60ecc30d10fffbdab262f7c0a17027f527d1
This can be found by running sha256sum &amp;lt;malspam document&amp;gt; on Linux:
What is the child process command line when the user enabled the Macro?  explorer.exe collectionBoxConst.hta
Now that we have the malicious Word document, we can check it for macros using oleVBA to analyze the document.</description>
    </item>
    
    <item>
      <title>Insider Disk Analysis With FTK</title>
      <link>https://1d8.github.io/writeups/cyberdefenders/insider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/cyberdefenders/insider/</guid>
      <description>Description: Using FTK disk analysis tool to analyze a Linux disk image CyberDefenders Insider - https://cyberdefenders.org/blueteam-ctf-challenges/64
This challenge centers around using FTKImager to analyze a Linux disk image.
 What distribution of Linux is being used on this machine? What is the MD5 hash of the apache access.log? It is believed that a credential dumping tool was downloaded? What is the file name of the download? There was a super-secret file created.</description>
    </item>
    
    <item>
      <title>Keeper Writeup</title>
      <link>https://1d8.github.io/writeups/htb/keeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/htb/keeper/</guid>
      <description>Initial Recon Starting off with an initial nmap scan of our target host: nmap -sV -sC 10.10.11.227 -oA keeper:
We see that there&amp;rsquo;s 3 open ports:
 22 - SSH 80 - HTTP 8000 - HTTP  I wasn&amp;rsquo;t able to connect to port 8000 and kept receiving an Unable to connect error:
But connecting to port 80, we find that there&amp;rsquo;s a hyperlink that&amp;rsquo;s pointing to a virtual host (vHost) at the tickets.</description>
    </item>
    
    <item>
      <title>L&#39;espion OSINT</title>
      <link>https://1d8.github.io/writeups/cyberdefenders/lespionosint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/cyberdefenders/lespionosint/</guid>
      <description>Description: Using Open Source Intelligence (OSINT) techniques to solve a CyberDefender&amp;rsquo;s challenge CyberDefenders L&amp;rsquo;espion - https://cyberdefenders.org/blueteam-ctf-challenges/73
This challenge centers around OSINT.
File -&amp;gt; Github.txt For task #1, we&amp;rsquo;re asked:
What is the API key the insider added to his GitHub repositories?
And the only thing inside the Github.txt file is a Github profile: https://github.com/EMarseille99
Scrolling through the profile, there&amp;rsquo;s only one repository which isn&amp;rsquo;t a fork of another Github repository: https://github.</description>
    </item>
    
    <item>
      <title>Malware Analysis of Maldoc For Remcos RAT</title>
      <link>https://1d8.github.io/publications/remcosdocdropperanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/remcosdocdropperanalysis/</guid>
      <description>Description: This post dives into a malicious document file that drops the Remcos RAT malware
Overview  Sample &amp;amp; more info Password to the zip file is infected First seen: May 27, 2020 url no longer up File type: docm Sha256 hash: 202d979d74f0478de0fbea103e2585a84fdab5646ad19437f5e4c4ba0cda7b90 url used was: hxxp://185.205.209.166/dkkp/qlyzbsuu.a12.exe &amp;amp; shortened via tinyurl Macros used  Analysis Once opened, the document looks like this:
In my opinion, not much work was put into crafting the actual document, but who am I to judge?</description>
    </item>
    
    <item>
      <title>Mr. Phisher Macros</title>
      <link>https://1d8.github.io/writeups/thm/mrphisher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/mrphisher/</guid>
      <description>Description: Deobfuscating maldoc macros to find a flag
TryHackMe&amp;rsquo;s Mr. Phisher - https://tryhackme.com/room/mrphisher
This challenge involves deobfuscating macros in a Microsoft Office Document to discover our flag!
We&amp;rsquo;re given an Ubuntu machine which has a document named MrPhisher.docm. Since it has the .docm extension, we can assume that it does indeed contain macros. I chose to download this file to my Remnux machine so that way I have access to the analysis tools that Remnux offers such as olevba which will help us extract the macros without having to open the document.</description>
    </item>
    
    <item>
      <title>Neighbor</title>
      <link>https://1d8.github.io/writeups/thm/neighbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/neighbor/</guid>
      <description>Description: Hacking a web application by manipulating URL parameters Neighbor - https://tryhackme.com/room/neighbour
We first perform an Nmap scan of the target IP address:
nmap -sV -sC &amp;lt;ip address&amp;gt;
 -sV - probe open ports and determine service/version info of any running services -sC - run default scripts on those discovered services  Starting Nmap 7.80 ( https://nmap.org ) at 2022-11-26 10:40 PST Nmap scan report for 10.10.228.136 Host is up (0.</description>
    </item>
    
    <item>
      <title>Quotient - Windows Unquoted Service Path Exploitation</title>
      <link>https://1d8.github.io/writeups/thm/quotient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/quotient/</guid>
      <description>Description: Exploiting a Windows unquoted service path vulnerability to escalate our privileges TryHackMe Quotient Without MsfVenom - https://tryhackme.com/room/quotient
This room on TryHackMe involves exploiting an unquoted service path vulnerability to escalate our privileges and read the flag located on the Administrator&amp;rsquo;s desktop.
Let&amp;rsquo;s quickly go over what a unquoted service path vulnerability is and how to exploit it.
An unquoted service path vulnerability occurs when there&amp;rsquo;s a service whose service path contains spaces and it isn&amp;rsquo;t enclosed with quotation marks.</description>
    </item>
    
    <item>
      <title>Ransomware Memory Analysis With Volatility</title>
      <link>https://1d8.github.io/writeups/blueteamlabsonline/ransomwarememoryanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/blueteamlabsonline/ransomwarememoryanalysis/</guid>
      <description>Description: Performing memory analysis on a Windows machine infected with ransomware Blue Team Labs Online Memory Analysis Ransomware - https://blueteamlabs.online/home/challenge/1
In this challenge, we&amp;rsquo;re given a memory dump and told that the computer the memory dump was captured from, is the victim of a ransomware attack.
There&amp;rsquo;s 7 tasks in this challenge:
 Run vol.py -f infected.vmem --profile=Win7SP1x86 psscan that will list all processes. What is the name of the suspicious process What is the parent process ID for the suspicious process?</description>
    </item>
    
    <item>
      <title>Ransomware Memory Dump Analysis With Redline</title>
      <link>https://1d8.github.io/writeups/letsdefend/ransomwareattackredline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/ransomwareattackredline/</guid>
      <description>Description: Performing analysis on a memory dump file of a Windows machine infected with Revil ransomware using FireEye’s Redline memory analysis tool Let&amp;rsquo;s Defend Ransomware Attack - https://app.letsdefend.io/challenge/ransomware-attack/
For this challenge, we&amp;rsquo;re given a Redline memory analysis file named AnalysisSession1.mans. This challenge does require FireEye&amp;rsquo;s Redline software to solve.
The 6 tasks we&amp;rsquo;re given include:
 Finding the full path of the dropped DLL Finding the MD5 hash of the dropped DLL Finding the ransomware note file name Finding the URL that the initial payload was downloaded from The ransomware dropped a copy of the legitimate application into the Temp folder, so we must find the filename of the legitimate application the ransomware also dropped Finding the name of the ransomware  After opening up the analysis file in Redline and going to the Processes tab, I noticed that there is a notepad.</description>
    </item>
    
    <item>
      <title>REvil Memory Dump Analysis With Redline</title>
      <link>https://1d8.github.io/writeups/thm/thmrevilcorp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/thmrevilcorp/</guid>
      <description>Description: &amp;ldquo;Performing analysis on a memory dump file of a Windows machine infected with Revil ransomware using FireEye’s Redline memory analysis tool TryHackMe&amp;rsquo;s REvil Corp - https://tryhackme.com/room/revilcorp
Q: What is the compromised employee&amp;rsquo;s full name?
Q: What is the operating system of the compromised host?
By searching in the System Information section of Analysis data, we can find the answer to these 2 questions:
Q: What is the name of the malicious executable that the user opened?</description>
    </item>
    
    <item>
      <title>REvil Ransomware Memory Dump Analysis With Redline</title>
      <link>https://1d8.github.io/writeups/letsdefend/revilransomwareanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/revilransomwareanalysis/</guid>
      <description>Description: Performing analysis on a memory dump file of a Windows machine infected with Revil ransomware using FireEye&amp;rsquo;s Redline memory analysis tool Let&amp;rsquo;s Defend - Revil Ransomware
For this challenge, we&amp;rsquo;re presented with 3 files:
 993ixjlb-readme.txt bad day.PNG AnalysisSession1.mans  The .mans file is a memory dump which can be analyzed with FireEye&amp;rsquo;s Redline security tool.
We&amp;rsquo;re also presented with 10 challenge questions:
 What is the Operating System which the Redline image is being collected on?</description>
    </item>
    
    <item>
      <title>Sakura OSINT</title>
      <link>https://1d8.github.io/writeups/thm/sakurathmosint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/sakurathmosint/</guid>
      <description>Description: Using Open Source Intelligence (OSINT) techniques to solve a TryHackMe Sakura challenge Sakura Room - TryHackMe - https://tryhackme.com/room/sakura
Our first task is to find the username of the attacker and we are given a .svg image file which tend to contain a trove of data that could be read just by viewing the source of the file!
Line 20 of the source of the .svg file gives us the full filepath of the image, including the attacker&amp;rsquo;s username: SakuraSnowAngelAiko:</description>
    </item>
    
    <item>
      <title>Sau Writeup</title>
      <link>https://1d8.github.io/writeups/htb/sau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/htb/sau/</guid>
      <description>Starting off with an nmap scan for the box: nmap -sV -sC 10.10.11.224:
We see that there&amp;rsquo;s 3 ports opened:
 22 - SSH 80 - HTTP 55555 - Unknown  SSH is usually not a port to focus on when it comes to HTB machines, and port 80 is being filtered so we likely will not be able to access it. So let&amp;rsquo;s focus our efforts on this unknown service running on port 55555.</description>
    </item>
    
    <item>
      <title>Seized Linux Memory Analysis With Volatility</title>
      <link>https://1d8.github.io/writeups/cyberdefenders/seizedlinuxmemanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/cyberdefenders/seizedlinuxmemanalysis/</guid>
      <description>Description: Using Volatility to perform memory analysis on a memory dump of a CentOS Linux machine Seized - https://cyberdefenders.org/blueteam-ctf-challenges/92
In this challenge, we&amp;rsquo;re given a zip file which contains dump.mem along with another zip file named Centos7.3.10.1062.zip. The CentOS zip file is the profile that is necessary in order to use volatility with the Linux memory dump.
The challenge description states:
&amp;ldquo;Using Volatility, utilize your memory analysis skills to Investigate the provided Linux memory snapshots and figure out attack details.</description>
    </item>
    
    <item>
      <title>Suspicious Browser Extension Analysis</title>
      <link>https://1d8.github.io/writeups/letsdefend/extensionanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/letsdefend/extensionanalysis/</guid>
      <description>Description: Analyzing a malicious browser extension Suspicious Browser Extension - Let&amp;rsquo;s Defend https://app.letsdefend.io/challenge/suspicious-browser-extension
For this challenge, we&amp;rsquo;re given a .crx file which is a Chrome extension file. We can confirm this by running file on it:
Browser extensions are typically .zip files that contain the elements that make up the extension such as any Javascript, HTML, or other assets like the images associated with the extension. Knowing this, we can simply .</description>
    </item>
    
    <item>
      <title>Test About</title>
      <link>https://1d8.github.io/about/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/about/about/</guid>
      <description>This is an about post</description>
    </item>
    
    <item>
      <title>Threat Emulation Series - Introduction - Event Triggered Execution</title>
      <link>https://1d8.github.io/publications/threatactemulation_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/threatactemulation_1/</guid>
      <description>Description: This post is an introductory post to a series of blog posts that I&amp;rsquo;ll be diving into which will detail emulating threat actors and their associated TTPs with code.
In this particular blog post, we&amp;rsquo;ll be diving into the topic of persistence which can be accomplished by manipulating Windows registry key values! Specifically, we&amp;rsquo;ll be examining the Event Trigger Execution Technique in which an attacker modify system mechanisms to gain execution based upon specific events.</description>
    </item>
    
    <item>
      <title>Windows API Programming with Python</title>
      <link>https://1d8.github.io/publications/pyapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/pyapi/</guid>
      <description>Description: Programming with the Windows API in Python, utilizing the ctypes library
NOTE: When you&amp;rsquo;re interacting with the WinAPI, you&amp;rsquo;ll notice that some functions end in a W (EX: CreateFileW) while there are also the equivalent which end in an A (EX:CreateFileA). The difference is that functions ending in an A are ANSI functions while those that end in W are Unicode functions. In my experience, Python works best with the Unicode (W) functions.</description>
    </item>
    
    <item>
      <title>Windows Memory Forensics</title>
      <link>https://1d8.github.io/writeups/thm/thmmemoryforensics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/writeups/thm/thmmemoryforensics/</guid>
      <description>Description: &amp;ldquo;Performing memory forensics on Windows machine images using Volatility Memory Forensics - https://tryhackme.com/room/memoryforensics
In this challenge, we&amp;rsquo;re given 3 memory dump files totaling 3.2 GB in size:
 Snapshot6.vmem Snapshot14.vmem Snapshot19.vmem  I will be using remnux&amp;rsquo;s virtual machine to solve these tasks along with the volatility memory analysis tool!
Task 2 In our second task, we&amp;rsquo;re given Snapshot6.vmem and asked to find John&amp;rsquo;s password.
The first step from all these tasks that I took is identifying the correct memory profile to use with volatility which can be done via:</description>
    </item>
    
  </channel>
</rss>

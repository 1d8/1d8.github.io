<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Publications on </title>
    <link>https://1d8.github.io/publications/</link>
    <description>Recent content in Publications on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://1d8.github.io/publications/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible Trix</title>
      <link>https://1d8.github.io/publications/ansibletrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/ansibletrix/</guid>
      <description>Description: This post contains a set of Ansible commands that I&amp;rsquo;ve used recently to explore systems (both Linux &amp;amp; Windows) &amp;amp; enumerate different information about them!
Setup Ansible Module We can use the setup Ansible module which returns a wealth of information about the machine we&amp;rsquo;re accessing! We can run it as a one-liner by running: ansible all -i &amp;lt;IP Address&amp;gt;, -m setup -e &amp;quot;ansible_user=&amp;lt;username&amp;gt; ansible_password=&amp;lt;password&amp;gt; ansible_shell_type=powershell ansible_connection=ssh host_key_checking=false&amp;quot; and this would output:</description>
    </item>
    
    <item>
      <title>Diving Into LLMNR Poisoning</title>
      <link>https://1d8.github.io/publications/llmnrpoisoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/llmnrpoisoning/</guid>
      <description>Description: This post will dive into the topic of LLMNR poisoning, specifically what the LLMNR protocol is, how we could poison it, and diving into what it looks like in a packet capture
Lab Setup In my lab setup, I have 3 machines:
 Kali Linux machine representing the threat actor  IP address - 192.168.56.107   Windows workstation representing the victim  IP address - 192.168.56.118   Windows server representing the Domain Controller (DC)  IP address - 192.</description>
    </item>
    
    <item>
      <title>Dmasoft PrivEsc Exploit</title>
      <link>https://1d8.github.io/publications/dmasoft_cookiestealer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/dmasoft_cookiestealer/</guid>
      <description>Description: &amp;ldquo;Chains CVE-2021-29011 and CVE-2021-29012 together to inject Javascript and steal cookies
The attack scenario is:
 We compromise a low-level manager account on Dmasoft lab&amp;rsquo;s web interface We inject Javascript into an area this low-level manager account has access to A higher privilege manager account visits the area we injected our Javascript Their session cookie is sent to our website and we check their privileges  All of this is automated with elevate.</description>
    </item>
    
    <item>
      <title>Malware Analysis of Maldoc For Remcos RAT</title>
      <link>https://1d8.github.io/publications/remcosdocdropperanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/remcosdocdropperanalysis/</guid>
      <description>Description: This post dives into a malicious document file that drops the Remcos RAT malware
Overview  Sample &amp;amp; more info Password to the zip file is infected First seen: May 27, 2020 url no longer up File type: docm Sha256 hash: 202d979d74f0478de0fbea103e2585a84fdab5646ad19437f5e4c4ba0cda7b90 url used was: hxxp://185.205.209.166/dkkp/qlyzbsuu.a12.exe &amp;amp; shortened via tinyurl Macros used  Analysis Once opened, the document looks like this:
In my opinion, not much work was put into crafting the actual document, but who am I to judge?</description>
    </item>
    
    <item>
      <title>Windows API Programming with Python</title>
      <link>https://1d8.github.io/publications/pyapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://1d8.github.io/publications/pyapi/</guid>
      <description>Description: Programming with the Windows API in Python, utilizing the ctypes library
NOTE: When you&amp;rsquo;re interacting with the WinAPI, you&amp;rsquo;ll notice that some functions end in a W (EX: CreateFileW) while there are also the equivalent which end in an A (EX:CreateFileA). The difference is that functions ending in an A are ANSI functions while those that end in W are Unicode functions. In my experience, Python works best with the Unicode (W) functions.</description>
    </item>
    
  </channel>
</rss>
